generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement()) @map("user_id")
  firstName     String         @map("first_name")
  lastName      String         @map("last_name")
  email         String         @unique
  phoneNo       String?        @map("phone_no")
  role          UserRole       @default(PARTICIPANT)
  password      String
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now()) @map("created_at")
  // Relations
  organizedEvents Event[]      @relation("EventOrganizer")
  registrations   Registration[]
  
  @@map("User")
}

model Event {
  id              Int           @id @default(autoincrement()) @map("event_id")
  organiserId     Int          @map("organiser_id")
  name            String
  description     String?       @db.Text
  location        String?
  eventStartDate  DateTime      @map("event_start_date")
  eventEndDate    DateTime      @map("event_end_date")
  eventStartTime  String        @map("event_start_time")
  eventEndTime    String        @map("event_end_time")
  status          EventStatus   @default(DRAFT)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  // Relations
  organizer       User          @relation("EventOrganizer", fields: [organiserId], references: [id])
  tickets         Ticket[]
  registrations   Registration[]
  questionnaire   Questionnaire?
  
  @@map("Event")
}

model Registration {
  id               Int              @id @default(autoincrement()) @map("registration_id")
  userId           Int              @map("user_id")
  eventId          Int              @map("event_id")
  status           RegistrationStatus @default(PENDING)
  registrationDate DateTime         @default(now()) @map("registration_date")
  // Relations
  user             User             @relation(fields: [userId], references: [id])
  event            Event            @relation(fields: [eventId], references: [id])
  ticketPurchases  TicketPurchase[]
  questionResponses QuestionResponse[]
  
  @@map("Registration")
}

model Ticket {
  id            Int              @id @default(autoincrement()) @map("ticket_id")
  eventId       Int              @map("event_id")
  name          String
  description   String?          @db.Text
  price         Decimal          @db.Decimal(10, 2)
  quantityTotal Int              @map("quantity_total")
  quantitySold  Int              @default(0) @map("quantity_sold")
  salesStart    DateTime?        @map("sales_start")
  salesEnd      DateTime?        @map("sales_end")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  // Relations
  event         Event            @relation(fields: [eventId], references: [id])
  purchases     TicketPurchase[]
  
  @@map("Ticket")
}

model TicketPurchase {
  id              Int       @id @default(autoincrement()) @map("purchase_id")
  registrationId  Int       @map("registration_id")
  ticketId        Int       @map("ticket_id")
  quantity        Int
  unitPrice       Decimal   @map("unit_price") @db.Decimal(10, 2)
  totalPrice      Decimal   @map("total_price") @db.Decimal(10, 2)
  createdAt       DateTime  @default(now()) @map("created_at")
  // Relations
  registration    Registration @relation(fields: [registrationId], references: [id])
  ticket          Ticket      @relation(fields: [ticketId], references: [id])
  payment         Payment?
  
  @@map("TicketPurchase")
}

model Questionnaire {
  id          Int               @id @default(autoincrement()) @map("questionnaire_id")
  eventId     Int               @unique @map("event_id")
  title       String
  description String?           @db.Text
  status      QuestionnaireStatus @default(DRAFT)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  // Relations
  event       Event             @relation(fields: [eventId], references: [id])
  questions   Question[]
  
  @@map("Questionnaire")
}

model Question {
  id              Int           @id @default(autoincrement()) @map("question_id")
  questionnaireId Int           @map("questionnaire_id")
  questionText    String        @map("question_text") @db.Text
  questionType    QuestionType  @default(TEXT) @map("question_type")
  isRequired      Boolean       @default(false) @map("is_required")
  orderIndex      Int           @map("order_index")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  // Relations
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  options         QuestionOption[]
  responses       QuestionResponse[]
  
  @@map("Question")
}

model QuestionOption {
  id           Int               @id @default(autoincrement()) @map("option_id")
  questionId   Int               @map("question_id")
  optionText   String           @map("option_text")
  orderIndex   Int              @map("order_index")
  createdAt    DateTime         @default(now()) @map("created_at")
  // Relations
  question     Question         @relation(fields: [questionId], references: [id])
  responses    QuestionResponse[]
  
  @@map("QuestionOption")
}

model QuestionResponse {
  id               Int          @id @default(autoincrement()) @map("response_id")
  registrationId   Int          @map("registration_id")
  questionId       Int          @map("question_id")
  responseText     String?      @map("response_text") @db.Text
  selectedOptionId Int?         @map("selected_option_id")
  submittedAt      DateTime     @default(now()) @map("submitted_at")
  // Relations
  registration     Registration @relation(fields: [registrationId], references: [id])
  question         Question     @relation(fields: [questionId], references: [id])
  selectedOption   QuestionOption? @relation(fields: [selectedOptionId], references: [id])
  
  @@map("QuestionResponse")
}

model Payment {
  id            Int           @id @default(autoincrement()) @map("payment_id")
  purchaseId    Int          @unique @map("purchase_id")
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  // Relations
  purchase      TicketPurchase @relation(fields: [purchaseId], references: [id])
  
  @@map("Payment")
}

enum UserRole {
  PARTICIPANT
  ORGANIZER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum QuestionnaireStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
  DROPDOWN
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}