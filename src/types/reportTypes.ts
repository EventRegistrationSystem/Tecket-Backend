/**
 * @openapi
 * components:
 *   schemas:
 *     TicketAggregate:
 *       type: object
 *       description: Represents an aggregation of ticket data, either by count or monetary value.
 *       properties:
 *         name:
 *           type: string
 *           description: Name of the ticket type (e.g., “VIP”, “General Admission”)
 *           example: "VIP Pass"
 *         total:
 *           type: number
 *           description: Numeric value, interpretation depends on context (e.g., count of tickets, monetary value)
 *           example: 50
 *       required:
 *         - name
 *         - total
 */
export interface TicketAggregate {
  name: string;   // Name of the ticket type (e.g., “VIP”, “General Admission”)
  total: number;  // Numeric value, interpretation depends on context (e.g., count of tickets, monetary value)
}

/**
 * @openapi
 * components:
 *   schemas:
 *     QuestionnaireResponse:
 *       type: object
 *       description: Represents a single question and its corresponding response from a participant.
 *       properties:
 *         question:
 *           type: string
 *           description: The text of the question asked.
 *           example: "What is your T-shirt size?"
 *         response:
 *           type: string
 *           description: The participant's response to the question.
 *           example: "Large"
 *       required:
 *         - question
 *         - response
 */
export interface QuestionnaireResponse {
  question: string; // The text of the question asked.
  response: string; // The participant's response to the question.
}

/**
 * @openapi
 * components:
 *   schemas:
 *     SalesSection:
 *       type: object
 *       description: Contains details about the sales performance of an event.
 *       properties:
 *         totalTickets:
 *           type: integer
 *           description: Total number of tickets sold for the event.
 *           example: 150
 *         revenue:
 *           type: number
 *           format: float
 *           description: Total monetary revenue generated from all ticket sales.
 *           example: 7500.75
 *         soldByTickets:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/TicketAggregate'
 *           description: Breakdown of units sold for each ticket type.
 *         revenueByTickets:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/TicketAggregate'
 *           description: Breakdown of revenue generated by each ticket type.
 *       required:
 *         - totalTickets
 *         - revenue
 *         - soldByTickets
 *         - revenueByTickets
 */
export interface SalesSection {
  totalTickets: number;             // Total number of tickets sold for the event.
  revenue: number;                  // Total monetary revenue generated from all ticket sales.
  soldByTickets: TicketAggregate[]; // Breakdown of units sold for each ticket type.
  revenueByTickets: TicketAggregate[];// Breakdown of revenue generated by each ticket type.
}

/**
 * @openapi
 * components:
 *   schemas:
 *     RemainingSection:
 *       type: object
 *       description: Contains details about the remaining ticket availability for an event.
 *       properties:
 *         remainingTickets:
 *           type: integer
 *           description: Total number of tickets still available for purchase.
 *           example: 50
 *         remainingByTicket:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/TicketAggregate'
 *           description: Breakdown of unsold tickets for each ticket type.
 *       required:
 *         - remainingTickets
 *         - remainingByTicket
 */
export interface RemainingSection {
  remainingTickets: number;           // Total number of tickets still available for purchase.
  remainingByTicket: TicketAggregate[]; // Breakdown of unsold tickets for each ticket type.
}

/**
 * @openapi
 * components:
 *   schemas:
 *     ParticipantSection:
 *       type: object
 *       description: Represents detailed information about a single event participant/attendee.
 *       properties:
 *         name:
 *           type: string
 *           description: Full name of the participant.
 *           example: "John Doe"
 *         email:
 *           type: string
 *           format: email
 *           description: Email address of the participant.
 *           example: "john.doe@example.com"
 *         ticket:
 *           type: string
 *           description: Name or type of the ticket held by the participant (e.g., "VIP", "Early Bird").
 *           example: "Early Bird"
 *         registrationStatus:
 *           type: string
 *           enum: [PENDING, CONFIRMED, CANCELLED]
 *           description: Registration status of the participant.
 *           example: "CONFIRMED"
 *         questionnaireResponses:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/QuestionnaireResponse'
 *           description: Array of responses given by the participant to event questionnaires.
 *       required:
 *         - name
 *         - email
 *         - ticket
 *         - registrationStatus
 *         - questionnaireResponses
 */
export interface ParticipantSection {
  name: string;                             // Full name of the participant.
  email: string;                            // Email address of the participant.
  ticket: string;                           // Name or type of the ticket held by the participant (e.g., "VIP", "Early Bird").
  registrationStatus: string;               // Registration status of the participant (PENDING, CONFIRMED, CANCELLED).
  questionnaireResponses: QuestionnaireResponse[]; // Array of responses given by the participant to event questionnaires.
}

/**
 * @openapi
 * components:
 *   schemas:
 *     QuestionAggregate:
 *       type: object
 *       description: |
 *         Represents the aggregation of responses for a single multiple-choice or selectable-option question.
 *         The keys are the option texts, and the values are the number of times that option was selected.
 *       additionalProperties:
 *         type: integer
 *         description: Number of times this option was selected.
 *       example:
 *         "Yes": 15
 *         "No": 5
 *         "Maybe": 2
 */
export interface QuestionAggregate {
  [option: string]: number; // Maps an answer option (string) to its selection count (number).
}

/**
 * @openapi
 * components:
 *   schemas:
 *     Report:
 *       type: object
 *       description: Defines the overall structure of the event report.
 *       properties:
 *         eventName:
 *           type: string
 *           description: Name of the event.
 *           example: "Annual Tech Conference 2025"
 *         eventDescription:
 *           type: string
 *           description: Description of the event.
 *           example: "A conference about the future of technology."
 *         start:
 *           type: string
 *           format: date-time
 *           description: Start date and time of the event.
 *         end:
 *           type: string
 *           format: date-time
 *           description: End date and time of the event.
 *         sales:
 *           $ref: '#/components/schemas/SalesSection'
 *         remaining:
 *           $ref: '#/components/schemas/RemainingSection'
 *         participants:
 *           type: array
 *           items:
 *             $ref: '#/components/schemas/ParticipantSection'
 *           description: Array of all participants/attendees with their details.
 *         questions:
 *           type: object
 *           description: |
 *             Aggregated responses for event questions.
 *             The key is the question text (string), and the value is a QuestionAggregate object.
 *           additionalProperties:
 *             $ref: '#/components/schemas/QuestionAggregate'
 *           example:
 *             "Dietary Preference?": { "Vegetarian": 10, "Vegan": 3 }
 *             "T-Shirt Size?": { "S": 5, "M": 20, "L": 15 }
 *       required:
 *         - eventName
 *         - eventDescription
 *         - start
 *         - end
 *         - sales
 *         - remaining
 *         - participants
 *         - questions
 */
export interface Report {
    eventName: string;                            // Name of the event.
    eventDescription: string;                     // Description of the event.
    start: Date;                                  // Start date and time of the event.
    end: Date;                                    // End date and time of the event.
    sales: SalesSection;                          // Section detailing ticket sales figures.
    remaining: RemainingSection;                  // Section detailing remaining ticket availability.
    participants: ParticipantSection[];           // Array of all participants/attendees with their details.
    questions: Record<string, QuestionAggregate>; // Aggregated responses for event questions.
                                                  // The key is the question text (string),
                                                  // and the value is a QuestionAggregate object.
}

/**
 * @openapi
 * components:
 *   schemas:
 *     ErrorResponse:
 *       type: object
 *       properties:
 *         success:
 *           type: boolean
 *           example: false
 *         message:
 *           type: string
 *           example: "Error message description"
 *       required:
 *         - success
 *         - message
 */
// This is a common type, it might be defined elsewhere or can be defined here for swagger-jsdoc to pick up.
// If it's used across many type files, consider a central `commonTypes.ts` or similar.
// For now, defining it here ensures the /events/{eventId}/report route's documentation is complete.
export interface ErrorResponse {
    success: boolean;
    message: string;
}
